// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieHosting.Models;

namespace MovieHosting.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220623220518_Migration7")]
    partial class Migration7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MovieHosting.Models.AdminMovie", b =>
                {
                    b.Property<int>("IdAdmin")
                        .HasColumnType("int");

                    b.Property<int>("IdMovie")
                        .HasColumnType("int");

                    b.HasKey("IdAdmin", "IdMovie")
                        .HasName("Admin_Movie_PK");

                    b.HasIndex("IdMovie");

                    b.ToTable("AdminMovie");

                    b.HasData(
                        new
                        {
                            IdAdmin = 5,
                            IdMovie = 1
                        },
                        new
                        {
                            IdAdmin = 5,
                            IdMovie = 2
                        },
                        new
                        {
                            IdAdmin = 5,
                            IdMovie = 3
                        });
                });

            modelBuilder.Entity("MovieHosting.Models.ClientMovie", b =>
                {
                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("IdMovie")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdClient", "IdMovie")
                        .HasName("Client_Movie_PK");

                    b.HasIndex("IdMovie");

                    b.ToTable("ClientMovie");

                    b.HasData(
                        new
                        {
                            IdClient = 1,
                            IdMovie = 1,
                            PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IdClient = 1,
                            IdMovie = 2,
                            PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MovieHosting.Models.Contact", b =>
                {
                    b.Property<int>("IdContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdContact");

                    b.HasIndex("IdClient")
                        .IsUnique();

                    b.ToTable("Contact");

                    b.HasData(
                        new
                        {
                            IdContact = 1,
                            Email = "s21120@pjwstk.edu.pl",
                            IdClient = 1,
                            Phone = "+48333333333"
                        },
                        new
                        {
                            IdContact = 2,
                            Email = "s21121@pjwstk.edu.pl",
                            IdClient = 2,
                            Phone = "+48334433333"
                        },
                        new
                        {
                            IdContact = 3,
                            Email = "s21122@pjwstk.edu.pl",
                            IdClient = 3,
                            Phone = "+48335533333"
                        });
                });

            modelBuilder.Entity("MovieHosting.Models.Movie", b =>
                {
                    b.Property<int>("IdMovie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Genres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MovieCost")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdMovie");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("MovieHosting.Models.MovieOfWeek", b =>
                {
                    b.Property<int>("IdMovieOfWeek")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMovie")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdMovieOfWeek");

                    b.HasIndex("IdMovie")
                        .IsUnique();

                    b.ToTable("MovieOfWeek");

                    b.HasData(
                        new
                        {
                            IdMovieOfWeek = 1,
                            IdMovie = 1,
                            StartDate = new DateTime(2022, 6, 19, 0, 5, 17, 653, DateTimeKind.Local).AddTicks(4559)
                        });
                });

            modelBuilder.Entity("MovieHosting.Models.MovieParticipant", b =>
                {
                    b.Property<int>("IdMovieParticipant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMovie")
                        .HasColumnType("int");

                    b.Property<int>("IdParticipant")
                        .HasColumnType("int");

                    b.Property<string>("MovieAward")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("MoviePayment")
                        .HasColumnType("float");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.HasKey("IdMovieParticipant");

                    b.HasIndex("IdMovie");

                    b.HasIndex("IdParticipant");

                    b.ToTable("MovieParticipant");

                    b.HasData(
                        new
                        {
                            IdMovieParticipant = 1,
                            IdMovie = 1,
                            IdParticipant = 3,
                            MovieAward = "some",
                            MoviePayment = 500000.0,
                            RoleType = 0
                        },
                        new
                        {
                            IdMovieParticipant = 2,
                            IdMovie = 1,
                            IdParticipant = 4,
                            MovieAward = "some",
                            MoviePayment = 300000.0,
                            RoleType = 0
                        },
                        new
                        {
                            IdMovieParticipant = 3,
                            IdMovie = 1,
                            IdParticipant = 3,
                            MovieAward = "some",
                            MoviePayment = 300000.0,
                            RoleType = 2
                        },
                        new
                        {
                            IdMovieParticipant = 4,
                            IdMovie = 3,
                            IdParticipant = 4,
                            MovieAward = "some",
                            MoviePayment = 500000.0,
                            RoleType = 0
                        },
                        new
                        {
                            IdMovieParticipant = 5,
                            IdMovie = 3,
                            IdParticipant = 3,
                            MovieAward = "some",
                            MoviePayment = 300000.0,
                            RoleType = 0
                        },
                        new
                        {
                            IdMovieParticipant = 6,
                            IdMovie = 3,
                            IdParticipant = 4,
                            MovieAward = "some",
                            MoviePayment = 300000.0,
                            RoleType = 1
                        });
                });

            modelBuilder.Entity("MovieHosting.Models.PaymentMethod", b =>
                {
                    b.Property<int>("IdPaymentMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("IdPaymentMethod");

                    b.HasIndex("IdClient");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            IdPaymentMethod = 1,
                            IdClient = 1,
                            PaymentType = 0,
                            ReferenceNumber = "32131221321312"
                        },
                        new
                        {
                            IdPaymentMethod = 2,
                            IdClient = 1,
                            PaymentType = 1,
                            ReferenceNumber = "PL231123213"
                        });
                });

            modelBuilder.Entity("MovieHosting.Models.Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PersonType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPerson");

                    b.ToTable("MovieParticipants");

                    b.HasData(
                        new
                        {
                            IdPerson = 1,
                            FirstName = "FirstName1",
                            LastName = "LastName1",
                            PersonType = "[0]"
                        },
                        new
                        {
                            IdPerson = 2,
                            FirstName = "FirstName2",
                            LastName = "LastName2",
                            PersonType = "[0]"
                        },
                        new
                        {
                            IdPerson = 3,
                            FirstName = "FirstName3",
                            LastName = "LastName3",
                            PersonType = "[1]"
                        },
                        new
                        {
                            IdPerson = 4,
                            FirstName = "FirstName4",
                            LastName = "LastName4",
                            PersonType = "[1]"
                        },
                        new
                        {
                            IdPerson = 5,
                            FirstName = "FirstName5",
                            LastName = "LastName5",
                            PersonType = "[2]"
                        });
                });

            modelBuilder.Entity("MovieHosting.Models.SeriesEpisode", b =>
                {
                    b.Property<int>("IdSeriesEpisode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<int>("IdSeason")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdSeriesEpisode");

                    b.HasIndex("IdSeason");

                    b.ToTable("SeriesEpisode");

                    b.HasData(
                        new
                        {
                            IdSeriesEpisode = 1,
                            Description = "desc",
                            EpisodeNumber = 1,
                            IdSeason = 1,
                            Name = "sr1s1ep1"
                        },
                        new
                        {
                            IdSeriesEpisode = 2,
                            Description = "desc",
                            EpisodeNumber = 2,
                            IdSeason = 1,
                            Name = "sr1s1ep2"
                        },
                        new
                        {
                            IdSeriesEpisode = 3,
                            Description = "desc",
                            EpisodeNumber = 1,
                            IdSeason = 2,
                            Name = "sr1s2ep1"
                        },
                        new
                        {
                            IdSeriesEpisode = 4,
                            Description = "desc",
                            EpisodeNumber = 2,
                            IdSeason = 2,
                            Name = "sr1s2ep2"
                        },
                        new
                        {
                            IdSeriesEpisode = 5,
                            Description = "desc",
                            EpisodeNumber = 1,
                            IdSeason = 1,
                            Name = "sr3s1ep1"
                        },
                        new
                        {
                            IdSeriesEpisode = 6,
                            Description = "desc",
                            EpisodeNumber = 2,
                            IdSeason = 1,
                            Name = "sr3s1ep2"
                        },
                        new
                        {
                            IdSeriesEpisode = 7,
                            Description = "desc",
                            EpisodeNumber = 1,
                            IdSeason = 2,
                            Name = "sr3s2ep1"
                        },
                        new
                        {
                            IdSeriesEpisode = 8,
                            Description = "desc",
                            EpisodeNumber = 2,
                            IdSeason = 2,
                            Name = "sr3s2ep2"
                        });
                });

            modelBuilder.Entity("MovieHosting.Models.SeriesSeason", b =>
                {
                    b.Property<int>("IdSeriesSeason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("IdSeries")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.HasKey("IdSeriesSeason");

                    b.HasIndex("IdSeries");

                    b.ToTable("SeriesSeason");

                    b.HasData(
                        new
                        {
                            IdSeriesSeason = 1,
                            Description = "desc",
                            IdSeries = 1,
                            Name = "sr1s1",
                            SeasonNumber = 1
                        },
                        new
                        {
                            IdSeriesSeason = 2,
                            Description = "desc",
                            IdSeries = 1,
                            Name = "sr1s2",
                            SeasonNumber = 2
                        });
                });

            modelBuilder.Entity("MovieHosting.Models.FeatureFilm", b =>
                {
                    b.HasBaseType("MovieHosting.Models.Movie");

                    b.Property<int>("DurationInMins")
                        .HasColumnType("int");

                    b.ToTable("FeatureFilm");

                    b.HasData(
                        new
                        {
                            IdMovie = 2,
                            Description = "Description2Description2 Description2 Description2Description2Description2 Description2 Description2Description2Description2 Description2Description2",
                            Genres = "[\"Thriller\",\"Action\"]",
                            MovieCost = 5.9900000000000002,
                            Name = "Film_Name2",
                            ReleaseDate = new DateTime(2015, 6, 24, 0, 5, 17, 651, DateTimeKind.Local).AddTicks(9280),
                            DurationInMins = 120
                        });
                });

            modelBuilder.Entity("MovieHosting.Models.Series", b =>
                {
                    b.HasBaseType("MovieHosting.Models.Movie");

                    b.ToTable("Series");

                    b.HasData(
                        new
                        {
                            IdMovie = 1,
                            Description = "A high school teacher with terminal cancer, along with his former student, manufactures and sells methamphetamine in order to secure a prosperous future for his family.",
                            Genres = "[\"Crime TV series\",\"Drama TV series\",\"Thriller\",\"Cruel\"]",
                            MovieCost = 5.9900000000000002,
                            Name = "Breaking Bad",
                            ReleaseDate = new DateTime(2013, 6, 24, 0, 5, 17, 646, DateTimeKind.Local).AddTicks(5005)
                        },
                        new
                        {
                            IdMovie = 3,
                            Description = "The infamous gang is led by the brutal Tommy Shelby, the leader of a crime family determined to achieve new heights at any cost.",
                            Genres = "[\"Crime TV series\",\"Historical films\"]",
                            MovieCost = 6.9900000000000002,
                            Name = "Peaky Blinders",
                            ReleaseDate = new DateTime(2017, 6, 24, 0, 5, 17, 652, DateTimeKind.Local).AddTicks(78)
                        });
                });

            modelBuilder.Entity("MovieHosting.Models.AdminMovie", b =>
                {
                    b.HasOne("MovieHosting.Models.Person", "AdminNavigation")
                        .WithMany("AdminMovies")
                        .HasForeignKey("IdAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieHosting.Models.Movie", "MovieNavigation")
                        .WithMany("AdminMovies")
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminNavigation");

                    b.Navigation("MovieNavigation");
                });

            modelBuilder.Entity("MovieHosting.Models.ClientMovie", b =>
                {
                    b.HasOne("MovieHosting.Models.Person", "ClientNavigation")
                        .WithMany("ClientMovies")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieHosting.Models.Movie", "MovieNavigation")
                        .WithMany("ClientMovies")
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientNavigation");

                    b.Navigation("MovieNavigation");
                });

            modelBuilder.Entity("MovieHosting.Models.Contact", b =>
                {
                    b.HasOne("MovieHosting.Models.Person", "ClientNavigation")
                        .WithOne("ContactNavigation")
                        .HasForeignKey("MovieHosting.Models.Contact", "IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientNavigation");
                });

            modelBuilder.Entity("MovieHosting.Models.MovieOfWeek", b =>
                {
                    b.HasOne("MovieHosting.Models.Movie", "MovieNavigation")
                        .WithOne("MovieOfWeekNavigation")
                        .HasForeignKey("MovieHosting.Models.MovieOfWeek", "IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieNavigation");
                });

            modelBuilder.Entity("MovieHosting.Models.MovieParticipant", b =>
                {
                    b.HasOne("MovieHosting.Models.Movie", "MovieNavigation")
                        .WithMany("MovieParticipants")
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieHosting.Models.Person", "ParticipantNavigation")
                        .WithMany("MovieParticipants")
                        .HasForeignKey("IdParticipant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieNavigation");

                    b.Navigation("ParticipantNavigation");
                });

            modelBuilder.Entity("MovieHosting.Models.PaymentMethod", b =>
                {
                    b.HasOne("MovieHosting.Models.Person", "ClientNavigation")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientNavigation");
                });

            modelBuilder.Entity("MovieHosting.Models.SeriesEpisode", b =>
                {
                    b.HasOne("MovieHosting.Models.SeriesSeason", "SeasonNavigation")
                        .WithMany("Episodes")
                        .HasForeignKey("IdSeason")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeasonNavigation");
                });

            modelBuilder.Entity("MovieHosting.Models.SeriesSeason", b =>
                {
                    b.HasOne("MovieHosting.Models.Series", "SeriesNavigation")
                        .WithMany("Seasones")
                        .HasForeignKey("IdSeries")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeriesNavigation");
                });

            modelBuilder.Entity("MovieHosting.Models.FeatureFilm", b =>
                {
                    b.HasOne("MovieHosting.Models.Movie", null)
                        .WithOne()
                        .HasForeignKey("MovieHosting.Models.FeatureFilm", "IdMovie")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieHosting.Models.Series", b =>
                {
                    b.HasOne("MovieHosting.Models.Movie", null)
                        .WithOne()
                        .HasForeignKey("MovieHosting.Models.Series", "IdMovie")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieHosting.Models.Movie", b =>
                {
                    b.Navigation("AdminMovies");

                    b.Navigation("ClientMovies");

                    b.Navigation("MovieOfWeekNavigation");

                    b.Navigation("MovieParticipants");
                });

            modelBuilder.Entity("MovieHosting.Models.Person", b =>
                {
                    b.Navigation("AdminMovies");

                    b.Navigation("ClientMovies");

                    b.Navigation("ContactNavigation");

                    b.Navigation("MovieParticipants");

                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("MovieHosting.Models.SeriesSeason", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("MovieHosting.Models.Series", b =>
                {
                    b.Navigation("Seasones");
                });
#pragma warning restore 612, 618
        }
    }
}
